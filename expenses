#!/bin/bash

completion() {
    local cmd="${0##*/}" func="_${0##*/}"

    cat <<EOF
#compdef $cmd

$func() {
    _arguments -C '1: :->cmds' '*:: :->cmd_args'
    case \$state in
        cmds)
            local -a subcmds=('completion:completion' 'expense:add expense' 'income:add income' 'delete:delete expenses' 'summary:show summary')
            _describe -t commands 'expenses command' subcmds
            ;;
        cmd_args)
            case \$words[1] in
                expense)
                    _arguments "-i[edit \$words[1] record]: :_${func}_expense_id" '-d[datetime]: :_${func}_datetime' '-c[category name]: :_${func}_category' ;;
                income)
                    _arguments "-i[edit \$words[1] record]: :_${func}_income_id" '-d[datetime]: :_${func}_datetime' '-c[category name]: :_${func}_category' ;;
                delete)
                    _${func}_id ;;
                summary)
                    _arguments '-a[show all summary]' '-e[show expense]' '-i[show income]' '-b[show balance]' ;;
            esac
            ;;
    esac
}

_${func}_expense_id() {
    local q="SELECT e.id, strftime('%Y-%m-%d', date), ifnull(c.name, '-'), amount FROM expenses AS e LEFT JOIN category AS c ON e.category_id = c.id WHERE amount < 0"
    eval set -- \$("$0" q -cmd '.mode tcl' <<< "\$q" | xargs -r -n4 printf '"%s[%s\t%s\t%d]" ')
    _values 'expense' "\$@"
}

_${func}_income_id() {
    local q="SELECT e.id, strftime('%Y-%m-%d', date), ifnull(c.name, '-'), amount FROM expenses AS e LEFT JOIN category AS c ON e.category_id = c.id WHERE amount > 0"
    eval set -- \$("$0" q -cmd '.mode tcl' <<< "\$q" | xargs -r -n4 printf '"%s[%s\t%s\t%d]" ')
    _values 'income' "\$@"
}

_${func}_datetime() {
    _values 'date' "\$(date '+%Y-%m-%d %H:%M:%S')"
}

_${func}_category() {
    eval set -- \$("$0" q -cmd '.mode tcl' <<< "SELECT name FROM category")
    _values 'category' "\$@"
}

compdef $func $cmd
EOF
}

expense() {
    eval set -- $(argparse "$@")
    (( ! $4 )) && die "error: amount is required" "" \
                      "usage: ${0##*/} ${FUNCNAME[0]} [-i <expenses-id>] [-d <datetime>] [-c <category-name>] amount"
    upsert "$1" "$2" "$3" "-$4"
    summary "$2" "$2"
}

income() {
    eval set -- $(argparse "$@")
    (( ! $4 )) && die "error: amount is required" "" \
                      "usage: ${0##*/} ${FUNCNAME[0]} [-i <expenses-id>] [-d <datetime>] [-c <category-name>] amount"
    upsert "$1" "$2" "$3" "$4"
    summary "$2" "$2"
}

delete() {
    (( ! $# )) && die "error: expenses id is required" "" \
                      "usage ${0##*/} ${FUNCNAME[0]} expenses-id..."
    local ids=$(printf "'%s'," "$@" | sed 's/,$//')
    sql <<< "DELETE FROM expenses WHERE id IN ($ids)"
}

summary() {
    local args=$(getopt -o aeid -- "$@")
    eval set -- "$args"

    while (( $# )); do
        case "$1" in
            --) shift; break ;;
            -a) expense=1 income=1 balance=1 ;;
            -e) expense=1 ;;
            -i) income=1 ;;
            -b) balance=1 ;;
        esac
        shift
    done

    local q="SELECT e.id, strftime('%Y-%m-%d', date) AS date, c.name AS category, amount FROM expenses AS e"
    q="$q LEFT JOIN category AS c ON e.category_id = c.id"

    local f
    if (( $# )); then
        f="date >= datetime('$(datetime "$1")', 'localtime')"
        [[ -n "$2" ]] && f="$f AND date <= datetime('$(datetime "$2")', 'localtime')"
    fi

    local a=(-cmd '.headers on' -cmd '.mode column')
    sql "${a[@]}" <<< "$q ${f:+WHERE} $f ORDER BY date ASC"; echo

    if (( $expense )); then
        sql "${a[@]}" <<< "SELECT ifnull(SUM(amount), 0) AS expense FROM expenses WHERE amount < 0 ${f:+AND} $f"; echo
    fi
    if (( $income )); then
        sql "${a[@]}" <<< "SELECT ifnull(SUM(amount), 0) AS income FROM expenses WHERE amount > 0 ${f:+AND} $f"; echo
    fi
    if (( $balance )); then
        sql "${a[@]}" <<< "SELECT ifnull(SUM(amount), 0) AS balance FROM expenses ${f:+WHERE} $f"; echo
    fi
}

argparse() {
    local args=$(getopt -o i:d:c: -- "$@")
    eval set -- "$args"

    local i d c
    while (( $# )); do
        case "$1" in
            --) shift; break ;;
            -i) shift; i="$1" ;;
            -d) shift; d=$(datetime "$1") ;;
            -c) shift; c=$(catid "$1") ;;
        esac
        shift
    done

    a="${1#-}"

    if [[ -n "$i" ]]; then
        local -a r
        eval r=($(sql -cmd '.mode tcl' <<< "SELECT date, category_id, amount FROM expenses WHERE id = '$i'"))
        d="${d:-${r[0]}}" c="${c:-${r[1]}}" a="${a:-${r[2]#-}}"
    fi

    printf '"%s" "%s" "%s" "%d"' "${i:-$(idgen)}" "${d:-now}" "$c" "$a"
}

datetime() {
    local d="$1"
    [[ "$1" =~ ^[0-9]+$ ]] && d="@$d"
    date -u -d "$d" '+%Y-%m-%d %H:%M:%S'
}

catid() {
    local n="$1"
    [[ -z "$n" || "$n" == '-' ]] && return
    local i=$(sql <<< "SELECT id FROM category WHERE name = '$n'")
    if [[ -z "$i" ]]; then
        i=$(idgen)
        sql <<< "INSERT INTO category VALUES ('$i', '$n')"
    fi
    echo "$i"
}

has() {
    if (( $(sql <<< "SELECT COUNT(*) FROM $1 WHERE id = '$2'") )); then
        return 0
    fi
    return 1
}

die() {
    printf '%s\n' "$@"; exit 1
}

idgen() {
    date +%s%N | sha1sum | awk NF=1 | tail -c10
}

sql() {
    cat | sqlite3 "$@" "$db"
}

upsert() {
    sql <<< "INSERT INTO expenses VALUES ('$1', datetime('$2', 'localtime'), '$3', $4) ON CONFLICT(id) DO UPDATE SET date = datetime('$2', 'localtime'), category_id = '$3', amount = $4"
}

home="${EXPENSES_HOME:-$HOME/.expenses}"
install -Ddm0700 "$home"

sheet="${EXPENSES_SHEET:-default}"

db="$home/${sheet}.db"

sql <<EOF
CREATE TABLE IF NOT EXISTS category (
  id TEXT NOT NULL,
  name TEXT UNIQUE NOT NULL,
  PRIMARY KEY(id)
)
EOF

sql <<EOF
CREATE TABLE IF NOT EXISTS expenses (
  id TEXT NOT NULL,
  date TEXT NOT NULL,
  category_id TEXT,
  amount INTEGER NOT NULL,
  PRIMARY KEY(id)
)
EOF

case "$1" in
    completion) shift; completion "$@" ;;
    q)          shift; sql        "$@" ;;
    expense)    shift; expense    "$@" ;;
    income)     shift; income     "$@" ;;
    delete)     shift; delete     "$@" ;;
    summary)    shift; summary    "$@" ;;
    *)                 summary    "$@" ;;
esac

sql <<< "DELETE FROM category WHERE id NOT IN (SELECT category_id FROM expenses)"
